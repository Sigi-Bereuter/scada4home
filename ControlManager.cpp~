/*
    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) 2012  <copyright holder> <email>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


#include "ControlManager.h"
#include "SharedUtils.h"

ControlManager::ControlManager()
{
   string CFG_PLC_IPADRESS = "plc_ipaddress";
   string CFG_CUL_DEVICENAME = "cul_devicename";
   string CFG_HMI_WEBSERVER_PORT = "hmi_webserver_port";
   string CFG_LOG_LEVEL = "log_level";
   
   std::cout << "Init Logtracer..." << std::endl;
   _Logger = new LogTracer();
   _Logger->SetLogLevel(true); 
      
   
   _Logger->Log(LogTypes::Audit, "Init Config...");
   _InitCfgOK = InitConfig();
   if(!_InitCfgOK)
   {
     _Logger->Log(LogTypes::Error, "InitConfig failed, cannot go on!");     
     return;
   }
   
   std::map<string,string>::iterator result = _ConfigMap.find(CFG_LOG_LEVEL);
   bool logLevelLow = true;
   if(result != _ConfigMap.end())
   {
     string strVal = (*result).second;
     logLevelLow = ((strVal.compare("0") == 0));     
   }
   if(logLevelLow)
   {
      _Logger->Log(LogTypes::Audit, "LogTracer initialized successfully, Loglevel = Low !");
      _Logger->SetLogLevel(false); 
   }
   else
   {
     _Logger->Log(LogTypes::Audit, "LogTracer initialized successfully, Loglevel =  Verbose");
     _Logger->SetLogLevel(true); 
   }
      
   _Logger->Log(LogTypes::Audit, "Init ItemRepository...");
   _ItemRepo = new ItemRepository(_Logger);
      
   _Logger->Log(LogTypes::Audit, "Init PLCManager...");
   result = _ConfigMap.find(CFG_PLC_IPADRESS);
   if(result == _ConfigMap.end())   
      _Logger->Log(LogTypes::Error, "Config-Key %s not found in Configfile",CFG_PLC_IPADRESS.c_str());  
   else     
      _PLC = new PLCManager(this,(*result).second, _Logger);
   
   _Logger->Log(LogTypes::Audit, "Init CULManager...");
   result = _ConfigMap.find(CFG_CUL_DEVICENAME);
   if(result == _ConfigMap.end())   
      _Logger->Log(LogTypes::Error, "Config-Key %s not found in Configfile",CFG_CUL_DEVICENAME.c_str());  
   else     
      _CUL = new CULManager(this,_ItemRepo,(*result).second, _Logger); 
   
   _Logger->Log(LogTypes::Audit, "Init HMIManager...");
   result = _ConfigMap.find(CFG_HMI_WEBSERVER_PORT);
   if(result == _ConfigMap.end())   
      _Logger->Log(LogTypes::Error, "Config-Key %s not found in Configfile",CFG_HMI_WEBSERVER_PORT.c_str());  
   else     
      _HMI = new HMIManager(_ItemRepo,this,(*result).second,_Logger);
   
   
   _Logger->Log(LogTypes::Audit, "Init RASManager...");
   _RAS = new RASManager(_ItemRepo,this,_Logger);
   
   
}

ControlManager::~ControlManager()
{
  
}

bool ControlManager::InitConfig()
{
  bool success = true;
  
  FILE *f;  
  string cfgFilePath = "scada4home.cfg";
  if((f=fopen(cfgFilePath.c_str(),"r"))==NULL)
  {
    _Logger->Log(LogTypes::Error, "Unable to open config file % s",cfgFilePath.c_str());
    return false;
  }
  
  fseek(f, 0, SEEK_END);
  long int size = ftell(f);
  rewind(f); 
  const int arrsize = 32000;
  if(size > arrsize)
    _Logger->Log(LogTypes::Error,"Content Size of config file %s (%i bytes) does not match the reserved array size (%d bytes): ",cfgFilePath.c_str(),size,arrsize);
  char strContent[arrsize];
  int len = fread(strContent,1,size,f);
  fclose(f);    
  if(len <= 0)
  {
     _Logger->Log(LogTypes::Error,"Config file %s is empty",cfgFilePath.c_str());
     return false;
  }
  strContent[len] = 0; //Null termination	
  
  vector<string> cfgLines;
  SharedUtils::Tokenize(strContent,cfgLines,"\r\n");	
  if(cfgLines.size() == 0)
  {
     _Logger->Log(LogTypes::Error,"Config file %s does not contain lines (terminated by crlf)",cfgFilePath.c_str());
     return false;
  }
  
  for(vector<string>::iterator iter = cfgLines.begin(); iter!=cfgLines.end(); ++iter)
  {
    string curLine = (*iter);
    string searchStr = "=";
    int sPos = curLine.find(searchStr);  
    if(sPos <= 0)
    {
       _Logger->Log(LogTypes::Error,"Config file contains line without key-value separator (=)  %s ",curLine.c_str());
      success = false;
      continue;
    }
    string cfgKey = curLine.substr(0,sPos);
    string cfgVal = curLine.substr(sPos+1,curLine.size()-sPos-1);
    _ConfigMap[cfgKey] = cfgVal;    
  }
  
  return success;  
}

bool ControlManager::Start()
{
  
  if(!_InitCfgOK)
  {
    _Logger->Log(LogTypes::Error, "Starting ControlManager not possible because InitConfig failed!");
    return false;
  }
  
  _Logger->Log(LogTypes::Audit, "Starting ControlManager...");
  _Logger->Log(LogTypes::Audit, "Loading ItemRepository...");
  _ItemRepo->Load();
  
  _PLC->Start();
  _CUL->Start();
  _HMI->Start();
  _RAS->Start(); 
  
  usleep(1000000);
  SyncPLCItems();  
  
}

void ControlManager::Stop()
{
  _PLC->Stop();
  _CUL->Stop();
  _HMI->Stop();
  _RAS->Stop();
}

void ControlManager::SyncPLCItems()
{
  
  vector<ScadaItem *> items = _ItemRepo->GetItems();
  for(vector<ScadaItem *>::iterator iter = items.begin();iter != items.end();++iter)
  {
    ScadaItemMessage msg;
    msg.MsgType = ItemMessageTypes::StatusRequest;
    msg.ItemType = (*iter)->ItemType;
    msg.ItemIndex = (*iter)->Index;
    msg.Property = ItemProperties::All;
    msg.Value = 0;
    _PLC->Send(msg);
    usleep(1000000);
  }  
}

void ControlManager::PLCMessageReceived(ScadaItemMessage argMsg)
{
  _Logger->Trace("Received PLC_NewMessage Callback");
  if(argMsg.MsgType == ItemMessageTypes::StatusUpdate)
  {
    ScadaItem *item = _ItemRepo->GetItem(argMsg.ItemType,argMsg.ItemIndex);
    if(item != NULL)
    {
      item->Properties[argMsg.Property] = argMsg.Value;
      if(argMsg.Property == ItemProperties::Position)
	_Logger->Trace("Item %d Position=%d",argMsg.ItemIndex,argMsg.Value);
    }
    
    _HMI->UpdateItemView(argMsg);
    
  }
}

void ControlManager::CULMessageReceived(ScadaItemMessage argMsg)
{
  _Logger->Trace("Received CUL_NewMessage Callback");
  _PLC->Send(argMsg);
}

void ControlManager::HMIMessageReceived(ScadaItemMessage argMsg)
{
  _Logger->Trace("Received HMI_NewMessage Callback");  
  _PLC->Send(argMsg);
}

void ControlManager::RASMessageReceived(ScadaItemMessage argMsg)
{
  _Logger->Trace("Received RAS_NewMessage Callback");  
  _PLC->Send(argMsg);
  
  
}

